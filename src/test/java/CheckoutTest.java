// Generated by Selenium IDE
import org.junit.Test;
import org.junit.Before;
import org.openqa.selenium.By;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.support.ui.ExpectedCondition;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import static org.junit.Assert.assertEquals;

public class CheckoutTest extends Hooks {

    public CheckoutPage checkoutPage;
    public WebDriverWait wait;

    @Before
    public void SetupPageObject() {
        checkoutPage = new CheckoutPage(driver);
        wait = new WebDriverWait(driver, 10);
    }


    @Test
    public void checkoutAsAGuest() throws InterruptedException {

        checkoutPage.addItemToCart();
        checkoutPage.cartInfo();
        checkoutPage.assertTextWhenReady(checkoutPage.stepTitleElement, "CHECKOUT METHOD");
        checkoutPage.clickGuest();
        checkoutPage.fillInMandatoryField();
        checkoutPage.continueButtons();
        checkoutPage.assertTextWhenReady(checkoutPage.subTitleElement, "THANK YOU FOR YOUR PURCHASE!");

    }

    @Test
    public void checkoutWhithUpdatedQuantityTest() {

        checkoutPage.addItemToCart();
        checkoutPage.addOneMoreProductToCart();
        checkoutPage.cartInfo();
        checkoutPage.assertTextWhenReady(checkoutPage.stepTitleElement, "CHECKOUT METHOD");
        checkoutPage.clickGuest();
        checkoutPage.fillInMandatoryField();
        checkoutPage.continueButtons();
        checkoutPage.assertTextWhenReady(checkoutPage.subTitleElement, "THANK YOU FOR YOUR PURCHASE!");

    }

    @Test
    public void checkFirstNameMandatoryFieldsInCheckoutTest() {

        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.firstnameInput);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredFirstName, "This is a required field.");
    }

    @Test
    public void checkLastNameMandatoryFieldsInCheckoutTest() {

        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.lastnameInput);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredLastName, "This is a required field.");
    }


    @Test
    public void checkStreet1MandatoryFieldsInCheckoutTest() {
        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.street1Input);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredStreet1, "This is a required field.");
    }

    @Test
    public void checkCityMandatoryFieldsInCheckoutTest() {
        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.cityInput);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredCity, "This is a required field.");

    }

    @Test
    public void checkPostCodeMandatoryFieldsInCheckoutTest() {
        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingPostcode);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredBillingPostcode, "This is a required field.");
    }

    @Test
    public void checkTelephoneMandatoryFieldsInCheckoutTest() {
        checkoutPage.fillMandatoryFieldsExcept(checkoutPage.billingTelephone);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredBillingTelephone, "This is a required field.");
    }

    @Test
    public void checkRegionMandatoryFieldsInCheckoutTest() {
        checkoutPage.fillMandatoryFieldsExceptSelect(checkoutPage.billingRegion);
        checkoutPage.assertTextWhenReady(checkoutPage.requiredBillingRegion, "Please select an option.");
    }
}